<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><chapter id="chapter0_theoretical_info" lang="ru">
  <title>Общие сведения</title>
  <para>Генератор отчетов  позволяет:</para>
  <itemizedlist>
    <listitem>
      <para>использовать  редактор  отчета для описания структуры извлекаемых данных;</para>
    </listitem>
    <listitem>
      <para>создавать отчет, определяемый классом Java. Для такого отчета необходимо определить класс и задать входные параметры. Класс должен реализовать интерфейс <code>com.haulmont.yarg.formatters.CustomReport</code>;</para>
    </listitem>
    <listitem>
      <para>хранить шаблон отчета в форматах <filename>.doc</filename>, <filename>.docx</filename>,   <filename>.odt</filename>, <filename>.html</filename>, <filename>.xls</filename>, <filename>.xlsx</filename>, <filename>.ftl</filename>;</para>
    </listitem>
    <listitem>
      <para>определять состав доступных отчетов для роли системы;</para>
    </listitem>
    <listitem>
      <para>определять состав доступных отчетов для экрана системы;</para>
    </listitem>
    <listitem>
      <para>сохранять результаты отчетов в форматах, доступных для просмотра без использования специальных средств:</para>
      <itemizedlist>
        <listitem>
          <para><filename>.doc</filename>,</para>
        </listitem>
        <listitem>
          <para><filename>.docx</filename>,</para>
        </listitem>
        <listitem>
          <para><filename>.pdf</filename>,</para>
        </listitem>
        <listitem>
          <para><filename>.xls</filename>,</para>
        </listitem>
        <listitem>
          <para><filename>.xlsx</filename>,</para>
        </listitem>
        <listitem>
          <para><filename>.html</filename>;</para>
        </listitem>
      </itemizedlist>
    </listitem>
    <listitem>
      <para>задавать форматы выходных значений отчета;</para>
    </listitem>
    <listitem>
      <para>локализовать имена отчетов.</para>
    </listitem>
  </itemizedlist>
  <section>
    <title>Создание структуры данных отчета</title>
    <para>Структура данных отчета представляет собой  <firstterm>дерево определителей полос</firstterm> (<firstterm>band definition</firstterm>). Определитель полосы имеет имя, ориентацию, родителя и список наборов данных.</para>
    <warning>
      <para>Имена полос и извлекаемых параметров должны содержать только латинские буквы, цифры или символ подчеркивания.</para>
    </warning>
    <para><firstterm>Набор данных</firstterm> − это объект, который описывает извлечение данных. Он может извлекать данные различными путями — SQL- или <glossterm linkend="glossary_jpql_id">JPQL</glossterm>-запросом, Groovy-скриптом или брать данные из переданных в параметрах сущностей (типы <userinput>Связанная сущность</userinput>, <userinput>Группа связанных сущностей</userinput>). В подсистеме создания отчетов существуют следующие типы наборов данных:</para>
    <orderedlist>
      <listitem>
        <para><emphasis role="bold">SQL и JPQL</emphasis></para>
        <para><glossterm linkend="glossary_jpql_id">JPQL</glossterm>-скрипт должен возвращать данные, помеченные <glossterm linkend="glossary_alias_id">алиасами</glossterm> с помощью <database>AS</database>. Для SQL-скрипта это условие не является обязательным.  </para>
        <warning>
          <para>Данные <glossterm linkend="glossary_alias_id">алиасы</glossterm> далее будут  использованы в шаблоне отчета. Если в SQL-скрипте отсутствуют алиасы, то обращение к атрибуту в шаблоне должно производиться через имя полосы:</para>
          <para><programlisting>&lt;имя полосы&gt;.&lt;имя атрибута в таблице&gt;</programlisting></para>
          <para>Если  используется PostgreSQL  или другая нечувствительная к регистру  СУБД, алиасы, присутствующие в SQL-скрипте необходимо обернуть в двойные кавычки.</para>
        </warning>
        <para>В запросе можно использовать входные параметры отчета и данные из родительских полос. К параметрам нужно обращаться по имени, заключенному в конструкцию <code>${}</code> (<code>${userName}</code>). К данным родительской полосы нужно обращаться аналогично, добавляя имя полосы перед именем параметра (<code>${Band1.param1}</code>)
Пример запроса на SQL:</para>
        <programlisting>select u.name as userName, u.login as userLogin 
from sec_user u 
where u.update_ts &gt; ${date1} and 
      u.group_id = ${Group.id}</programlisting>
        <para>Пример запроса на <glossterm linkend="glossary_jpql_id">JPQL</glossterm>:</para>
        <programlisting>select u.name as userName, u.login as userLogin 
from sec$user u 
where u.updateTs &gt; ${date1}</programlisting>
        <tip>
          <title>Совет</title>
          <para>В целях универсальности рекомендуется использовать язык запросов <glossterm linkend="glossary_jpql_id">JPQL</glossterm>.</para>
        </tip>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Groovy</emphasis></para>
        <para>Groovy-скрипт должен возвращать объект типа <code>List&lt;Map&lt;String, Object&gt;&gt;</code>. Объект <code>Map&lt;String, Object&gt;</code> соответствует одной записи в SQL-запросе. Ключ в отображении должен содержать <glossterm linkend="glossary_alias_id">алиас</glossterm> параметра.</para>
        <warning>
          <para>Данные <glossterm linkend="glossary_alias_id">алиасы</glossterm> далее будут  использованы в шаблоне отчета.</para>
        </warning>
        <para>Groovy-скрипт может использовать входные параметры отчета и данные родительских полос. В каждый скрипт передаются параметры <code>Band parentBand</code> и <code>Map&lt;String, Object&gt; params</code>. В отображении <code>params</code> содержатся входные параметры, а у <code>parentBand</code> можно вызвать метод <code>getParameter</code>, который принимает строку с именем параметра.</para>
        <para>Скрипты Groovy для загрузки данных могут напрямую вызывать методы <code>Query</code> и <code>EntityManager</code>.</para>
        <para>Пример скрипта:</para>
        <programlisting>User user = parentBand.getParameter(&apos;entity&apos;)
Group group = params[[&apos;group&apos;]
return [[&apos;userName&apos;: user.name,
         &apos;userLogin&apos;: user.login,
         &apos;group&apos;: group]]</programlisting>
      </listitem>
      <listitem>
        <para><emphasis role="bold">Связанная сущность и Группа связанных сущностей</emphasis></para>
        <para>Чтобы использовать данные типы набора данных необходимо, чтобы в отчете присутствовали параметры типов <userinput>Объект</userinput> и <userinput>Группа объектов</userinput> соответственно.  В этом случае в шаблоне будут использованы поля сущностей. <glossterm linkend="glossary_alias_id">Алиасы</glossterm> в шаблоне должны соответствовать именам выгружаемых полей сущности. Пример использования связанной сущности в качестве источника данных проиллюстрирован ниже.</para>
        <figure>
          <title>Шаблон отчета</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/example_singleEntityAsDataSetTypeTemplate.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>Структура отчета</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/example_singleEntityAsDataSetTypereportParameters.png" width="70%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure>
          <title>Параметры отчета</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/example_singleEntityAsDataSetTypeParametersAndFormats.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </listitem>
    </orderedlist>
    <para>Если определитель полосы имеет несколько наборов данных, их необходимо связать. Для этого используется связывающий параметр. Он представляет собой алиас, по которому будут связываться между собой наборы данных.</para>
  </section>
  <section>
    <title>Создание шаблона отчета</title>
    <section>
      <title>Шаблоны .xls и .xlsx</title>
      <para><filename>.xls</filename>- и .<filename>xlsx</filename>-шаблоны создается с помощью <application>Microsoft Office</application> или <application>OpenOffice</application>. </para>
      <para><emphasis role="bold">Именование регионов</emphasis></para>
      <para>Для того чтобы полоса отчета отобразилась на результирующем листе, необходимо создать в шаблоне именованный регион, имя которого совпадает с именем полосы. </para>
      <tip>
        <title>Подсказка</title>
        <para>Как задать именованный регион?</para>
        <para>Описанные ниже действия применены для <application>OpenOffice</application>.</para>
        <para>Откройте <application>OpenOffice.org Calc</application>.</para>
        <figure>
          <title>Задание диапазона вывода данных</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/xls_region.png" contentwidth="70%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Далее выделите диапазон ячеек, куда будут выводиться данные. После этого можно задать имя этому диапазону в окне, где отображаются названия ячеек. Название диапазона должно совпадать с именем полосы отчета.</para>
        <para>Возможно управлять названиями диапазонов (удалять, изменять, добавлять). Для этого перейдите к подпункту меню <guimenu>Вставка</guimenu> −&gt; <guimenu>Названия</guimenu> −&gt; <guimenu>Определить</guimenu>.</para>
        <figure>
          <title>Переход к окну управления названиями диапазонов</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/xls_menu.png" contentwidth="80%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>После этого откроется окно, представленное на рисунке ниже.</para>
        <figure>
          <title>Окно управления названиями диапазонов</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/xls_menu1.png" contentwidth="75%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Именованные регионы можно удалять, назначать им другие диапазоны.</para>
      </tip>
      <para>Регионы в результирующем отчете отрисовываются в том порядке, в котором идут соответствующие им полосы.</para>
      <para>Полосы в <filename>.xls</filename>- и <filename>.xlsx</filename>-отчете могут быть двух видов: горизонтальные и вертикальные. Горизонтальные растут вниз, вертикальные − вправо.</para>
      <para>Горизонтальные полосы могут содержать вложенные полосы. Поэтому необходимо для вложенных полос создавать именованные регионы непосредственно под регионами, соответствующими родительским полосам.</para>
      <para>Вертикальные полосы  вложенных полос иметь не могут.</para>
      <para><emphasis role="bold">Задание выходных параметров</emphasis></para>
      <para>В каждом именованном регионе нужно задать <glossterm linkend="glossary_alias_id">алиасы</glossterm> параметров.  При формировании отчета эти алиасы будут заменены на значения параметров из полос. Алиасы должны иметь вид <code>${имя параметра}</code>. Имя параметра в алиасе должно совпадать с именем параметра из полосы. Ячейки могут содержать форматирование и несколько алиасов внутри.
Шаблон может содержать картинки и формулы. Они должны целиком лежать в некотором именованном регионе.</para>
    </section>
    <section>
      <title>Шаблон .odt</title>
      <para><filename>.odt</filename>-шаблон создается с помощью <application>OpenOffice</application>.  Отчет с .odt-шаблоном может отрисовываться в .doc-файл или .pdf-файл.</para>
      <para><emphasis role="bold">Именование таблиц</emphasis></para>
      <para>Имя таблицы должно соответствовать имени полосы, которая в нее отрисовывается.</para>
      <tip>
        <title>Подсказка</title>
        <para>Как задать имя таблицы?</para>
        <para>Описанные ниже действия применены для <application>OpenOffice</application>.</para>
        <para>Откройте <application>OpenOffice.org Writer</application>.</para>
        <para>Создайте новую таблицу, перейдя к подпункту меню <guimenu>Таблица</guimenu> −&gt; <guimenu>Вставить</guimenu> −&gt; <guimenu>Таблицу</guimenu>.</para>
        <figure>
          <title>Переход к окну создания таблицы</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/doc_menu.png" contentwidth="80%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Далее в открывшемся окне в поле <guilabel>Название</guilabel> введите название таблицы. </para>
        <figure>
          <title>Окно создания таблицы</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/doc_menu1.png" contentwidth="80%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Задать или изменить имя уже созданной таблицы можно и другим образом. Нажмите правой кнопкой мыши на области таблицы и в контекстном меню выберите пункт <guilabel>Таблица</guilabel>. Перед Вами откроется окно, представленное на рисунке.</para>
        <figure>
          <title>Окно изменения свойств таблицы</title>
          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="img/doc_menu2.png" contentwidth="80%"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>В поле <guilabel>Название</guilabel> можно ввести новое название таблицы.</para>
      </tip>
      <para><emphasis role="bold">Задание выходных параметров</emphasis></para>
      <para>В <filename>.odt</filename>-шаблоне <glossterm linkend="glossary_alias_id">алиасы</glossterm> могут быть двух  видов − в таблицах и в тексте. В тексте алиас должен иметь вид <code>${имя полосы.имя параметра}</code>. В таблице алиас должен иметь вид <code>${имя параметра}</code>. Текст может содержать форматирование, а в ячейках таблиц может содержаться несколько алиасов.</para>
      <warning>
        <para>Таблица с <glossterm linkend="glossary_alias_id">алиасами</glossterm> должна содержать либо одну, либо две строки. Если строк в таблице две, то алиасы должны находиться во второй. Первая должна быть пустой, или содержать фиксированный текст. </para>
      </warning>
    </section>
    <section>
      <title>Шаблон .doc</title>
      <para><filename>.doc</filename>-шаблон создается с помощью <application>OpenOffice</application> или <application>Microsoft Office</application>. Он аналогичен  <filename>.odt</filename>-шаблону за исключением того, что  не поддерживает работу с таблицами. </para>
    </section>
    <section>
      <title>Шаблон .docx</title>
      <para><filename>.docx</filename>-шаблон создается с помощью <application>Microsoft Office</application>. </para>
      <para>В <filename>.docx</filename>-шаблоне аналогично .<filename>odt</filename>-шаблону <glossterm linkend="glossary_alias_id">алиасы</glossterm> могут быть двух  видов − в таблицах и в тексте. </para>
    </section>
    <section>
      <title>Шаблон .html</title>
      <para><filename>.html</filename>-шаблон должен быть файлом c расширением <filename>.html</filename> в кодировке <code>UTF-8</code> (без <code>BOM</code>). Для форматирования в шаблоне можно использовать тэги <application>FreeMarker</application> (Более подробно о <application>FreeMarker</application> можно прочитать на сайте <ulink url="http://freemarker.org/">http://freemarker.org/</ulink>). 
Модель документа имеет следующую структуру:</para>
      <programlisting>Band { 
      bands [ bandName : [ band, .. ], .. ] 
      fields [ fieldName : fieldValue, .. ] 
}</programlisting>
      <para>Например, для доступа к полю <code>name</code> в полосе <code>band</code> в нулевой строке выборки используется путь:</para>
      <programlisting>Root.bands.band[0].fields.name</programlisting>
      <para>Для удобства в шаблоне можно использовать присваивание <parameter>assign</parameter>:</para>
      <programlisting>&lt;#assign TableHeader = Root.bands.HeaderBand&gt;</programlisting>
      <para><emphasis role="bold">Структура шаблона</emphasis></para>
      <programlisting>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;ru&quot;&gt;
    &lt;head&gt;
        &lt;title&gt; &lt;!-- Report title --&gt; &lt;/title&gt;
        &lt;style type=&quot;text/css&quot;&gt;
            /* Write your styles here */
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;!-- Write your template here --&gt;
    &lt;/body&gt;
&lt;/html&gt;</programlisting>
      <para><emphasis role="bold">Примеры</emphasis></para>
      <para>Имеем структуру полос следующего вида:</para>
      <programlisting>Root {
    HeaderBand {
        query = return [[ &quot;name&quot; : &quot;Column1&quot; ],[ &quot;name&quot; : &quot;Column2&quot; ]]
    }
    Band1 { 
        query = return [
            [&quot;field1&quot; : &quot;Value 11&quot;, &quot;field2&quot; : &quot;Value 12&quot;], 
            [&quot;field1&quot; : &quot;Value 21&quot; , &quot;field2&quot; : &quot;Value 22&quot;]
        ]
    }
    Band2 {
        query = return [[ &quot;header&quot; : &quot;Header1&quot; ], [ &quot;header&quot; : &quot;Header2&quot; ]]
        SubBand1 {
            query = return [[&quot;header&quot; : &apos;SubHeader1&apos;] , [ &quot;header&quot; : &apos;SubHeader2&apos; ]]
        }
    }
}</programlisting>
      <variablelist>
        <varlistentry>
          <term>Обращение к полю</term>
          <listitem>
            <programlisting>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;ru&quot;&gt;
    &lt;head&gt;
        &lt;title&gt; Простой шаблон &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;#assign Tree1 = Root.bands.Band2&gt;
        &lt;h1&gt; Заголовок&lt;/h1&gt;
        &lt;p&gt;
            ${Tree1[1].bands.SubBand1[0].fields.header}
        &lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Список</term>
          <listitem>
            <programlisting>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;ru&quot;&gt;
    &lt;head&gt;
        &lt;title&gt; Пример списка &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;#assign Table1Header = Root.bands.HeaderBand&gt;
        
        &lt;#if Table1Header?has_content&gt;
        &lt;ol&gt; 
            &lt;#list Table1Header as header&gt;
            &lt;li&gt; ${header.fields.name} &lt;/li&gt;
            &lt;/#list&gt;  
        &lt;/ol&gt;
        &lt;/#if&gt; 
    &lt;/body&gt;
&lt;/html&gt;</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Таблица</term>
          <listitem>
            <programlisting>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;ru&quot;&gt;
    &lt;head&gt;
        &lt;title&gt; Таблица &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;#assign Table1Header = Root.bands.HeaderBand&gt;
        &lt;#assign Table1 = Root.bands.Band1&gt;       
        &lt;table border=&quot;1&quot; cellpadding=&quot;5&quot; cellspacing=&quot;0&quot; width=&quot;200&quot;&gt;
            &lt;thead&gt;
                &lt;tr&gt;
                &lt;#list Table1Header as header&gt;
                    &lt;td&gt; ${header.fields.name} &lt;/td&gt;
                &lt;/#list&gt;
                &lt;/tr&gt;
            &lt;/thead&gt;
            &lt;tbody&gt;
            &lt;#list Table1 as row&gt;
                &lt;tr&gt;
                    &lt;td&gt;
                        ${row.fields.field1}
                    &lt;/td&gt;
                    &lt;td&gt;
                        ${row.fields.field2}
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/#list&gt;
            &lt;/tbody&gt;
        &lt;/table&gt;  
    &lt;/body&gt;
&lt;/html&gt;</programlisting>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Многоуровневый список</term>
          <listitem>
            <programlisting>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.1//EN&quot; &quot;http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xml:lang=&quot;ru&quot;&gt;
    &lt;head&gt;
        &lt;title&gt; Многоуровневый список &lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;#assign Tree1 = Root.bands.Band2&gt;        
        &lt;ul&gt;
            &lt;#list Tree1 as item&gt;
            &lt;li&gt;
                &lt;h2&gt; ${item.fields.header} &lt;/h2&gt;
                &lt;#if item.bands.SubBand1?has_content&gt;
                &lt;ul&gt;
                    &lt;#list item.bands.SubBand1 as subitem&gt;
                    &lt;li&gt;
                        &lt;h3&gt; ${subitem.fields.header} &lt;/h3&gt;
                    &lt;/li&gt;
                    &lt;/#list&gt;
                &lt;/ul&gt;
                &lt;/#if&gt;
            &lt;/li&gt;
            &lt;/#list&gt;
        &lt;/ul&gt;  
    &lt;/body&gt;
&lt;/html&gt;</programlisting>
          </listitem>
        </varlistentry>
      </variablelist>
      <para><emphasis role="bold">Использование рендеринга HTML в PDF</emphasis></para>
      <para>Отчеты, имеющие формат шаблона <filename>.html</filename> и формат вывода <filename>.pdf</filename>, не всегда корректно отображают шрифты. Для решения этой проблемы добавьте в каталог <filename>conf</filename> приложения директорию <filename>/cuba/fonts/</filename> с необходимыми <filename>.ttf</filename>-шрифтами. Второй способ − использовать системные шрифты с помощью установки  свойства <property>cuba.reporting.fontsDir</property>=<literal>C:/Windows/Fonts</literal></para>
    </section>
    <section>
      <title>Шаблон .ftl</title>
      <para>Для форматирования  <filename>.ftl</filename>-шаблонов используются тэги FreeMarker.</para>
    </section>
    <section>
      <title>Шаблон, определяемый классом</title>
      <para> Шаблоны, определяемые классом используются в тех случаях, когда выбирать данные с помощью  SQL или Groovy слишком сложно  или невозможно. Например, в случаях, когда отчет представляет собой результат объединения нескольких других отчетов. </para>
      <para>Класс, определяющий шаблон должен реализовывать интерфейс <code>com.haulmont.yarg.formatters.CustomReport</code>.</para>
      <para>Ниже приведен пример простого шаблона, определяемого классом. Он представляет собой имя и фамилию выбранного автора. Создайте в модуле <structname>core</structname> класс <code>TemplateExample</code>. Его код приведен ниже. </para>
      <programlisting>import com.haulmont.yarg.structure.BandData;
import com.haulmont.yarg.structure.Report;
import com.sample.library.entity.Author;

import java.io.Serializable;
import java.util.Map;

public class TemplateExample implements CustomReport{

    @Override
    public byte[] createReport(Report report, BandData rootBand, Map&lt;String, Object&gt; params) {
        StringBuilder sb = new StringBuilder();
        sb.append(&quot;&lt;html&gt;&lt;body&gt;&quot;);
        Author author = (Author) params.get(&quot;author&quot;);
        sb.append(author.getFirstName()).append(&quot; &quot;).append(author.getLastName());
        sb.append(&quot;&lt;/body&gt;&lt;/html&gt;&quot;);
        return sb.toString().getBytes();  
    }
}</programlisting>
      <para>В созданном классе переопределен метод <code>createReport</code>. Он возвращает файл отчета в виде массива байтов. Его параметрами являются </para>
      <itemizedlist>
        <listitem>
          <para><code>Report report </code>- отчет, для которого мы создаем шаблон;</para>
        </listitem>
        <listitem>
          <para><code>BandData rootBand</code> - данные, полученные из корневой полосы; </para>
        </listitem>
        <listitem>
          <para><code>Map&lt;String, Object&gt; params</code> - параметры, определенные для шаблона.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>
  <section>
    <title>Задание входных параметров отчета</title>
    <para>Отчет может иметь параметры, которые используются наборами данных для извлечения данных.  </para>
    <figure>
      <title>Редактор параметров отчета</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/parametersEditor.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Параметр обязательно должен иметь <glossterm linkend="glossary_alias_id">алиас</glossterm>, имя и тип. Имя параметра отображается на экране ввода параметров, алиас используется источниками данных. Параметры могут быть следующих типов: дата, время, дата и время, текст, булевский тип, число, перечисление, объект, список объектов. Параметры могут быть обязательными или не обязательными. Если тип параметра − объект или группа объектов, существует возможность задать экран выбора сущностей. Для локализации параметра необходимо перейти на вкладку <guilabel>Локализация</guilabel> и в поле <guilabel>Строки локализации</guilabel> ввести значение следующего формата:</para>
    <programlisting>&lt;название локали&gt;=&lt;название параметра на языке локали&gt;</programlisting>
  </section>
  <section>
    <title>Задание форматирования значений выходных параметров отчета</title>
    <para>Для каждого из выходных значений отчёта можно задать форматирование. Для этого нужно добавить элемент-форматтер, где указать полное имя выходного параметра (путь от корня, например <code>Test.name</code>, <code>Test</code> − имя полосы, <code>name</code> − имя параметра) и выбрать строку форматирования из списка часто используемых форматов для чисел и дат или задать этот формат самостоятельно.  Для чисел применяется <code>DecimalFormat</code> (более подробно о <code>DecimalFormat</code> можно прочитать на сайте <ulink url="http://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormat.html">http://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormat.html</ulink>), для дат − <code>SimpleDateFormat</code> (более подробно о <code>DecimalFormat</code> можно прочитать на сайте <ulink url="http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html">http://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html).</ulink></para>
    <figure>
      <title>Редактор формата</title>
      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="img/formatEditor.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Форматы позволяют вставлять в документ изображения и html-блоки.</para>
    <itemizedlist>
      <listitem>
        <para>Для вставки изображения выходное значение должно быть строкой URL для доступа к нему, а в формате значения строка форматирования должна иметь вид: <code>${image:&lt;Width&gt;x&lt;Height&gt;}</code>, например <code>${image:200x300}</code>.</para>
      </listitem>
      <listitem>
        <para>Для вставки html-блока необходимо возвращать в выходном значении html-разметку, а в формате значения выбрать <code>${html}</code> в качестве строки форматирования. В выходном значении тэги верхнего уровня до <code>&lt;body&gt;</code> включительно могут быть опущены. При необходимости произойдет автоматическое дополнение недостающих тегов верхнего уровня. Кодировка всех блоков <code>UTF-8</code>. CSS и атрибут <literal>style</literal> не поддерживаются.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Разграничение прав доступа к отчетам</title>
    <para>Отчеты можно привязывать к экранам и\или ролям пользователей. Для этого необходимо на вкладке <guilabel>Экраны и роли</guilabel> добавить экраны, с которых можно вызывать отчет, и роли пользователей, которым позволено это делать. По умолчанию отчет может вызываться из любых экранов и любыми ролями. Если экран или роль заданы явно, то отчет может быть вызван только из этого экрана или только данной ролью.</para>
  </section>
  <section><title>Локализация отчетов</title>Имена отчетов можно локализовать. Для этого необходимо перейти на вкладку <guilabel>Локализация</guilabel> и ввести в поле <guilabel>Строки локализации</guilabel> значение следующего формата: <programlisting>&lt;название локали&gt;=&lt;название отчета на языке локали&gt;</programlisting>Пример:<programlisting>en=Books by author
ru=Книги по автору</programlisting></section>
</chapter>
