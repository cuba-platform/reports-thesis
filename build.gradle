/*
 * Copyright (c) 2011 Haulmont Technology Ltd. All Rights Reserved.
 * Haulmont Technology proprietary and confidential.
 * Use is subject to license terms.
 */

allprojects {
    ext.artifactGroup = 'com.haulmont.reports'
    ext.artifactVersion = cubaVersion.replace('-SNAPSHOT', '')
    ext.isSnapshot = cubaVersion.endsWith('-SNAPSHOT')
    ext.vcs = 'svn'

    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 1, 'minutes'
        resolutionStrategy.cacheChangingModulesFor 1, 'minutes'
    }
}

buildscript {
    ext.cubaVersion = '5.4-SNAPSHOT'
    ext.cubaVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : cubaVersion
    
    println("CUBA Platform - Reports Version ${ext.cubaVersion}")
    println("")
    
    def docPluginVersion = '1.2.6'
    def DOC_PLUGIN_VERSION = 'docPluginVersion'
    docPluginVersion = rootProject.hasProperty(DOC_PLUGIN_VERSION) ? rootProject[DOC_PLUGIN_VERSION] : docPluginVersion
		
    repositories {
        mavenLocal()
        maven {
            credentials {
                username System.getenv('HAULMONT_REPOSITORY_USER')
                password System.getenv('HAULMONT_REPOSITORY_PASSWORD')
            }
            url "http://repository.haulmont.com:8587/nexus/content/groups/work"
        }
    }
    dependencies {
        classpath group: 'com.haulmont.gradle', name: 'cuba-plugin', version: cubaVersion
		classpath group: 'com.haulmont.gradle', name: 'doc-plugin', version: docPluginVersion
    }
}

apply(plugin: 'maven')
apply(plugin: 'idea')
apply(plugin: 'cuba')
apply(plugin: 'doc')

def globalModule = project(':reports-global')
def coreModule = project(':reports-core')
def guiModule = project(':reports-gui')
def webModule = project(':reports-web')
def desktopModule = project(':reports-desktop')
def webLegacyModule = project(':reports-web6')

apply from: "$rootProject.projectDir/lib.gradle"

def servletApi = [group: 'org.apache.tomcat', name: 'tomcat-servlet-api', version: '7.0.53']
def postgres = [group: 'postgresql', name: 'postgresql', version: '9.0-801.jdbc4']

def groovyArtifact = [group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.1.6']
def asm = [group: 'asm', name: 'asm', version: '3.2']

def baseVersion = artifactVersion + (isSnapshot ? '-SNAPSHOT' : '')

configure([globalModule, coreModule, guiModule, webModule, webLegacyModule, desktopModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'checkstyle')
    apply(plugin: 'cuba')

    dependencies {
        compile(group: 'com.haulmont.cuba', name: 'cuba-global', version: baseVersion)
        testCompile(group: 'junit', name: 'junit', version: '4.5')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    String checkstyleConfigDir = "${rootProject.projectDir}/config/checkstyle"
    checkstyle {
        configFile = new File("${checkstyleConfigDir}/checkstyle.xml".toString())
        configProperties = [
                'checkstyleConfigDir' : checkstyleConfigDir
        ]
        reportsDir = new File("${buildDir}/checkstyle".toString())
    }

    checkstyleMain << {
        def checkstyleDir = "${project.buildDir}/checkstyle".toString()
        ant.xslt('in': "$checkstyleDir/main.xml",
                out: "$checkstyleDir/$project.name-checkstyle.html",
                style: "$checkstyleConfigDir/checkstyle.xsl")
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing) {
        persistenceXml = "$projectDir/src/reports-persistence.xml"
    }

    task enhanceTransient(type: CubaEnhanceTransient) {
        metadataXml = "$globalModule.projectDir/src/reports-metadata.xml"
    }

    dependencies {
		compile(project.ext.yargApi) {
            exclude group: 'org.codehaus.groovy'
        }
    }
}

configure(coreModule) {
    apply plugin: 'groovy'

    sourceSets {
        test {
            groovy {
                srcDir 'test'
            }
        }
    }

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion)
		compile(project.ext.yarg) {
            exclude group: 'org.codehaus.groovy'
        }
		
        testCompile(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion, classifier: 'tests')
        provided(servletApi)
        jdbc(postgres)

        dbscripts(group: 'com.haulmont.cuba', name: 'cuba-core', version: baseVersion, classifier: 'db', ext: 'zip')

        testRuntime postgres
        testRuntime servletApi

        compile groovyArtifact
        compile asm
    }
    
    test {
        scanForTestClasses = false
        includes = ['**/*Test.class']
    }

    assembleDbScripts { moduleAlias = '20-reports' }

    dbScriptsArchive {
        exclude '10-cuba/**'
    }
    
    task createTestDb(dependsOn: assemble, description: 'Creates local Postgres database for tests', type: CubaDbCreation) {
        dbms = 'postgres'
        dbName = 'reports_test'
        dbUser = 'root'
        dbPassword = 'root'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-gui', version: baseVersion)
        provided(servletApi)
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion)
        webcontent(group: 'com.haulmont.cuba', name: 'cuba-web', version: baseVersion, classifier: 'web', ext: 'zip')
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'app'
        appJars('cuba-global', 'cuba-client', 'cuba-gui', 'cuba-web',
                'vaadin-server', 'vaadin-shared-deps', 'vaadin-shared', 'vaadin-theme-compiler',
                'aceeditor', 'popupbutton',
                'reports-global', 'reports-gui', 'reports-web')
    }
}

configure(desktopModule) {
    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-desktop', version: baseVersion)
    }
}

task restart(dependsOn: ['stop', ':reports-core:deploy', ':reports-web:deploy'],
        description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

configure(webLegacyModule) {
    configurations {
        webcontent
    }

    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile(group: 'com.haulmont.cuba', name: 'cuba-web6', version: baseVersion)
        webcontent(group: 'com.haulmont.cuba', name: 'cuba-web6', version: baseVersion, classifier: 'web', ext: 'zip')
    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'app6'
        appJars('cuba-global', 'cuba-client', 'cuba-gui', 'cuba-web6',
                'vaadin', 'popupbutton',
                'reports-global', 'reports-gui', 'reports-web')
    }
}

/***************************** Documentation  *****************************/

// These variables must be the project properties
ext.docSrcDir = file('doc/content')
ext.docToolsDir = file('doc/tools')
ext.docCssDir = new File(docToolsDir, 'css')
ext.docDstDir = new File("$buildDir/doc")
ext.docTmpDir = new File("$buildDir/tmp/doc")

task transformReporting(type: TransformDocbook) {
    sourceDir = new File(docSrcDir, 'reporting/ru')
    sourceFile = new File(sourceDir, 'reporting.xml')
    destFile = new File(docTmpDir, 'reporting/ru/reporting.xml')
    classpath = configurations.buildDoc
}

task transformReportingEng(type: TransformDocbook) {
	sourceDir = new File(docSrcDir, 'reporting/eng')
    sourceFile = new File(sourceDir, 'reporting.xml')
    destFile = new File(docTmpDir, 'reporting/eng/reporting.xml')
    classpath = configurations.buildDoc
}

def commonXslParameters = [
        'toc.section.depth': '5',
        'chunk.section.depth': '5',
        'section.autolabel': '1',
        'chapter.autolabel': '1',
        'appendix.autolabel': 'A'
    ]

task buildReportingWebHelp(type: DocBook2WebHelp, dependsOn: transformReporting) {
    sourceFile = transformReporting.destFile
    imagesDir = new File(transformReporting.sourceDir, "img")
    destDir = new File(docDstDir, "reporting/ru/webhelp")
    templateDir = new File(docToolsDir, "webhelp/template")
    searchDir = new File(docToolsDir, "webhelp/search")
    brand = "Reporting Library"
    language = "ru"
    xslParameters = commonXslParameters
}

task buildReportingWebHelpEng(type: DocBook2WebHelp, dependsOn: transformReportingEng) {
    sourceFile = transformReportingEng.destFile
    imagesDir = new File(transformReportingEng.sourceDir, "img")
    destDir = new File(docDstDir, "reporting/eng/webhelp")
    templateDir = new File(docToolsDir, "webhelp/template")
    searchDir = new File(docToolsDir, "webhelp/search")
    brand = "Reporting Library"
    language = "en"
    xslParameters = commonXslParameters
}

task buildReportingXhtml(type: Docbook2Xhtml, dependsOn: transformReporting) {
    source transformReporting.destFile
    destFile = new File(docTmpDir, 'reporting-pdf/reporting-pdf.html')
    stylesheetName = 'pdf.xsl'
    resources = fileTree(new File(docSrcDir, 'reporting/ru')) {
        include 'img/*.png'
        include 'img/*.jpg'
    }
    resources += fileTree(docCssDir) {
        include '*.css'
    }
}

task buildReportingXhtmlEng(type: Docbook2Xhtml, dependsOn: transformReportingEng) {
    source transformReportingEng.destFile
    destFile = new File(docTmpDir, 'reporting-pdf/reporting-pdf.html')
    stylesheetName = 'pdf.xsl'
    resources = fileTree(new File(docSrcDir, 'reporting/eng')) {
        include 'img/*.png'
        include 'img/*.jpg'
    }
    resources += fileTree(docCssDir) {
        include '*.css'
    }
}
task buildReportingPdf(type: Xhtml2Pdf, dependsOn: buildReportingXhtml) {
    inputs.dir docCssDir
    sourceFile = buildReportingXhtml.destFile
    destFile = new File(docDstDir, 'reporting/ru/pdf/reporting.pdf')
    classpath = configurations.buildDoc
    fonts = zipTree(configurations.docFonts.singleFile)
}

task buildReportingPdfEng(type: Xhtml2Pdf, dependsOn: buildReportingXhtmlEng) {
    inputs.dir docCssDir
    sourceFile = buildReportingXhtmlEng.destFile
    destFile = new File(docDstDir, 'reporting/eng/pdf/reporting.pdf')
    classpath = configurations.buildDoc
    fonts = zipTree(configurations.docFonts.singleFile)
}

task buildReportingSingleHtml(type: Docbook2Xhtml, dependsOn: transformReporting) {
    source transformReporting.destFile
    destFile = new File(docDstDir, 'reporting/ru/html-single/reporting.html')
    stylesheetName = 'html-single.xsl'
    resources = fileTree(new File(docSrcDir, 'reporting/ru')) {
        include 'img/**/*.png'
        include 'img/**/*.jpg'
    }
    resources += fileTree(docCssDir) {
        include '*.css'
    }
}

task buildReportingSingleHtmlEng(type: Docbook2Xhtml, dependsOn: transformReportingEng) {
    source transformReportingEng.destFile
    destFile = new File(docDstDir, 'reporting/eng/html-single/reporting.html')
    stylesheetName = 'html-single.xsl'
    resources = fileTree(new File(docSrcDir, 'reporting/eng')) {
        include 'img/**/*.png'
        include 'img/**/*.jpg'
    }
    resources += fileTree(docCssDir) {
        include '*.css'
    }
}

task buildDoc(type: Zip, description: 'Build documentation',
        dependsOn: [buildReportingSingleHtml, /*buildReportingSingleHtmlEng,*/ buildReportingPdf/*, buildReportingPdfEng*/, buildReportingWebHelp]) {
    from 'build/doc'
    destinationDir = file('build/distributions')
    baseName = 'reports-doc'
    version = baseVersion
}

artifacts {
    if (Boolean.valueOf(System.getProperty("buildDoc")))
        archives buildDoc
}
